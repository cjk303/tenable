# app.py
import os
from pathlib import Path
from typing import Optional
import paramiko
from threading import Thread
from queue import Queue
from flask import Flask, render_template_string, request, Response

BASE_DIR = Path(__file__).parent

app = Flask(__name__)
app.secret_key = os.environ.get("FLASK_SECRET_KEY", "change-me")

# --- Local package paths in the same directory ---
LOCAL_PACKAGES = {
    # Ubuntu
    "ubuntu1604_amd64": BASE_DIR / "NessusAgent-10.9.0-ubuntu1604_amd64.deb",
    "ubuntu1804_amd64": BASE_DIR / "NessusAgent-10.9.0-ubuntu1804_amd64.deb",
    "ubuntu2004_amd64": BASE_DIR / "NessusAgent-10.9.0-ubuntu2004_amd64.deb",
    "ubuntu2204_amd64": BASE_DIR / "NessusAgent-10.9.0-ubuntu2204_amd64.deb",
    # RHEL
    "el7_x86_64": BASE_DIR / "NessusAgent-10.9.0-el7.x86_64.rpm",
    "el8_x86_64": BASE_DIR / "NessusAgent-10.9.0-el8.x86_64.rpm",
    "el9_x86_64": BASE_DIR / "NessusAgent-10.9.0-el9.x86_64.rpm",
}

# --- HTML template ---
TEMPLATE = r"""
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>Tenable Linux Agent Deployer</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
<style>
body { background: #f4f6f8; color: #1a1a1a; font-family: Arial, sans-serif; }
.card { background: #ffffff; border: 1px solid #d1d5db; border-radius: 1rem; }
.form-control, .form-select { background: #f9fafb; color: #1a1a1a; border: 1px solid #cbd5e1; }
.btn-primary { background: #005eb8; border-color: #005eb8; }
.btn-primary:hover { background: #004a99; border-color: #004a99; }
h1, h5, h6 { color: #002f6c; }
#live-log { height: 400px; overflow:auto; border:1px solid #ccc; background:#f9fafb; padding:10px; white-space: pre-wrap; }
</style>
</head>
<body>
<div class="container py-4">
<h1 class="fw-bold text-center mb-4">Tenable Linux Agent Deployer</h1>
<div class="card p-4">
<h5>Deploy to Hosts</h5>
<form method="post" action="/deploy">
<div class="mb-3">
<label class="form-label">Hosts (one per line)</label>
<textarea name="hosts" class="form-control" rows="4">{{ hosts or '' }}</textarea>
</div>
<div class="row g-3">
<div class="col-md-6">
<label class="form-label">SSH Username</label>
<input name="username" class="form-control" required>
</div>
<div class="col-md-6">
<label class="form-label">SSH Password</label>
<input name="password" type="password" class="form-control" required>
</div>
</div>
<div class="mt-3">
<label class="form-label">Sudo Password (optional)</label>
<input name="sudo_password" type="password" class="form-control">
</div>
<hr>
<h6>Link Agent Options</h6>
<div class="mb-3">
<label class="form-label">Activation Key</label>
<input name="key" class="form-control" required>
</div>
<div class="mb-3">
<label class="form-label">Link Mode</label><br>
<div class="form-check form-check-inline">
<input class="form-check-input" type="radio" name="mode" value="cloud" id="modeCloud" checked>
<label class="form-check-label" for="modeCloud">Cloud (Tenable.io)</label>
</div>
<div class="form-check form-check-inline">
<input class="form-check-input" type="radio" name="mode" value="manager" id="modeMgr">
<label class="form-check-label" for="modeMgr">On-Prem Manager</label>
</div>
</div>
<div id="mgrFields">
<div class="row g-3">
<div class="col-md-6">
<label class="form-label">Manager Host</label>
<input name="mgr_host" class="form-control" placeholder="scanner.example.com">
</div>
<div class="col-md-6">
<label class="form-label">Manager Port</label>
<input name="mgr_port" class="form-control" value="8834">
</div>
</div>
</div>
<div class="mt-3">
<label class="form-label">Groups/Policy Tags (optional)</label>
<input name="groups" class="form-control" placeholder="linux-servers,production">
</div>
<div class="form-check mt-3">
<input class="form-check-input" type="checkbox" value="1" id="forceRelink" name="force_relink">
<label class="form-check-label" for="forceRelink">Force re-link even if already linked</label>
</div>
<div class="mt-3">
<button class="btn btn-primary" type="submit">Deploy & Link</button>
</div>
</form>
</div>
<hr>
<h5>Live Deployment Log:</h5>
<div id="live-log"></div>
<script>
const evtSource = new EventSource("/stream");
const logDiv = document.getElementById("live-log");
evtSource.onmessage = function(e) {
    logDiv.innerHTML += e.data + "\n";
    logDiv.scrollTop = logDiv.scrollHeight;
};
const modeCloud = document.getElementById('modeCloud');
const modeMgr = document.getElementById('modeMgr');
const mgrFields = document.getElementById('mgrFields');
function toggleFields() { mgrFields.style.display = modeMgr.checked ? 'block' : 'none'; }
if(modeCloud && modeMgr){ modeCloud.addEventListener('change', toggleFields); modeMgr.addEventListener('change', toggleFields); toggleFields(); }
</script>
</div>
</body>
</html>
"""

# --- Live log queue ---
log_queue = Queue()
def log(message: str):
    print(message)
    log_queue.put(message)

def mask_password(text: str, password: str):
    return text.replace(password, "***") if password else text

def parse_hosts(text: str):
    return [h.strip() for h in text.splitlines() if h.strip()]

def select_local_package(os_type: str, release: str) -> Path:
    key = f"{os_type}{release}_amd64" if os_type == "debian" else f"el{release}_x86_64"
    log(f"[VERBOSE] Selecting package: {key}")
    if key in LOCAL_PACKAGES:
        return LOCAL_PACKAGES[key]
    raise RuntimeError(f"No local package found for {key}")

def detect_os(ssh: paramiko.SSHClient):
    stdin, stdout, _ = ssh.exec_command(
        "uname -m; if [ -f /etc/debian_version ]; then lsb_release -rs || cat /etc/lsb-release; "
        "elif [ -f /etc/redhat-release ]; then cat /etc/redhat-release; fi"
    )
    lines = stdout.read().decode().splitlines()
    arch = lines[0].strip()
    os_info = lines[1].strip() if len(lines) > 1 else ""
    log(f"[VERBOSE] Detected arch: {arch}, os_info: {os_info}")

    if "Ubuntu" in os_info:
        os_type = "debian"
        if "16.04" in os_info: release="1604"
        elif "18.04" in os_info: release="1804"
        elif "20.04" in os_info: release="2004"
        elif "22.04" in os_info: release="2204"
        else: raise RuntimeError(f"Unsupported Ubuntu version: {os_info}")
    elif "Red Hat" in os_info or "CentOS" in os_info:
        import re
        os_type = "rhel"
        match = re.search(r"release (\d+)", os_info)
        if match: release = match.group(1)
        else: raise RuntimeError(f"Unsupported RHEL version: {os_info}")
    else:
        raise RuntimeError(f"Unsupported OS info: {os_info}")
    return os_type, release

# --- Deployment logic ---
def deploy_to_host(host, username, password, sudo_password, key, mode, mgr_host, mgr_port, groups, force_relink):
    try:
        log(f"[{host}] Connecting via SSH...")
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(host, username=username, password=password, timeout=15)
        sudo_pw = sudo_password or password
        os_type, release = detect_os(ssh)
        pkg = select_local_package(os_type, release)
        remote_path = f"/tmp/{pkg.name}"
        log(f"[{host}] Uploading {pkg.name}...")
        sftp = ssh.open_sftp()
        sftp.put(str(pkg), remote_path)
        sftp.close()
        log(f"[{host}] Upload complete.")

        cmd = f"sudo dpkg -i {remote_path} || sudo apt-get -f install -y" if os_type=="debian" else f"sudo rpm -ivh {remote_path} || sudo yum localinstall -y {remote_path} || sudo dnf install -y {remote_path}"
        log(f"[{host}] Installing package...")
        stdin, stdout, stderr = ssh.exec_command(cmd,get_pty=True)
        stdin.write(sudo_pw+"\n"); stdin.flush()
        for line in (mask_password(stdout.read().decode(),sudo_pw)+mask_password(stderr.read().decode(),sudo_pw)).splitlines():
            log(f"[{host}] {line}")

        log(f"[{host}] Enabling and starting Nessus agent service...")
        stdin, stdout, stderr = ssh.exec_command("sudo systemctl enable --now nessusagent", get_pty=True)
        stdin.write(sudo_pw+"\n"); stdin.flush()
        for line in (mask_password(stdout.read().decode(),sudo_pw)+mask_password(stderr.read().decode(),sudo_pw)).splitlines():
            log(f"[{host}] {line}")

        stdin, stdout, _ = ssh.exec_command("/opt/nessus_agent/sbin/nessuscli agent status")
        linked = "linked" in stdout.read().decode().lower()
        if linked and not force_relink:
            log(f"[{host}] Agent already linked, skipping.")
        else:
            if linked and force_relink:
                log(f"[{host}] Forcing re-link...")
                stdin, stdout, stderr = ssh.exec_command("sudo /opt/nessus_agent/sbin/nessuscli agent unlink", get_pty=True)
                stdin.write(sudo_pw+"\n"); stdin.flush()
                for line in mask_password(stdout.read().decode(), sudo_pw).splitlines():
                    log(f"[{host}] {line}")
            link_cmd = f"/opt/nessus_agent/sbin/nessuscli agent link --key={key} --cloud" if mode=="cloud" else f"/opt/nessus_agent/sbin/nessuscli agent link --key={key} --host={mgr_host} --port={mgr_port}"
            if groups: link_cmd += f' --groups="{groups}"'
            log(f"[{host}] Linking agent...")
            stdin, stdout, stderr = ssh.exec_command(f"sudo {link_cmd}", get_pty=True)
            stdin.write(sudo_pw+"\n"); stdin.flush()
            for line in mask_password(stdout.read().decode(), sudo_pw).splitlines():
                log(f"[{host}] {line}")

        ssh.close()
        log(f"[{host}] Deployment finished successfully!")
    except Exception as e:
        log(f"[{host}] Deployment FAILED: {e}")

# --- Flask routes ---
@app.route("/", methods=["GET"])
def index(): return render_template_string(TEMPLATE, hosts="")

@app.route("/deploy", methods=["POST"])
def deploy():
    hosts = parse_hosts(request.form.get("hosts",""))
    username = request.form.get("username")
    password = request.form.get("password")
    sudo_password = request.form.get("sudo_password") or None
    key = request.form.get("key")
    mode = request.form.get("mode","cloud")
    mgr_host = request.form.get("mgr_host")
    mgr_port = request.form.get("mgr_port","8834")
    groups = request.form.get("groups","")
    force_relink = request.form.get("force_relink")=="1"

    Thread(target=lambda: [deploy_to_host(h,username,password,sudo_password,key,mode,mgr_host,mgr_port,groups,force_relink) for h in hosts], daemon=True).start()
    return render_template_string(TEMPLATE, hosts="\n".join(hosts))

@app.route("/stream")
def stream():
    def event_stream():
        while True:
            yield f"data: {log_queue.get()}\n\n"
    return Response(event_stream(), mimetype="text/event-stream")

if __name__=="__main__":
    app.run(debug=True)
