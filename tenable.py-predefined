from flask import Flask, render_template, request, Response
import os, json, tempfile, subprocess
from cryptography.fernet import Fernet

app = Flask(__name__)

# Load predefined accounts
with open("predefined_accounts.json") as f:
    PREDEFINED_ACCOUNTS = json.load(f)

# Load Fernet key from local file
KEY_FILE = "fernet.key"
if not os.path.isfile(KEY_FILE):
    raise FileNotFoundError(f"Fernet key file '{KEY_FILE}' not found. Generate it first.")

with open(KEY_FILE, "r") as kf:
    ENCRYPTION_KEY = kf.read().strip()

cipher = Fernet(ENCRYPTION_KEY.encode())

def decrypt_password(enc_password):
    return cipher.decrypt(enc_password.encode()).decode()

@app.route("/", methods=["GET", "POST"])
def index():
    if request.method == "POST":
        # Determine if a predefined account is selected
        account_key = request.form.get("predefined_account")
        if account_key and account_key in PREDEFINED_ACCOUNTS:
            account = PREDEFINED_ACCOUNTS[account_key]
            username = account["username"]
            password = decrypt_password(account["password"])
            sudo_password = decrypt_password(account["sudo_password"])
            activation_key = account["activation_key"]
        else:
            username = request.form.get("username")
            password = request.form.get("password")
            sudo_password = request.form.get("sudo_password")
            activation_key = request.form.get("activation_key")

        hosts = request.form.get("hosts").splitlines()
        groups = request.form.get("groups")
        mode = request.form.get("mode")
        manager_host = request.form.get("manager_host")
        manager_port = request.form.get("manager_port")
        escalate_method = request.form.get("escalate_method")

        # Create ephemeral Ansible inventory
        inventory_content = "[agents]\n" + "\n".join(hosts) + "\n"
        inventory_content += "[agents:vars]\n"
        inventory_content += f"ansible_user={username}\n"
        inventory_content += f"ansible_password={password}\n"
        inventory_content += f"ansible_become_password={sudo_password}\n"
        inventory_content += f"activation_key={activation_key}\n"
        inventory_content += f"groups={groups}\n"
        inventory_content += f"mode={mode}\n"
        inventory_content += f"manager_host={manager_host}\n"
        inventory_content += f"manager_port={manager_port}\n"
        inventory_content += f"escalate_method={escalate_method}\n"

        tmp_inventory = tempfile.NamedTemporaryFile(delete=False)
        tmp_inventory.write(inventory_content.encode())
        tmp_inventory.close()

        # Stream ansible-playbook output
        def stream_logs():
            cmd = ["ansible-playbook", "-i", tmp_inventory.name, "deploy_nessus_agent.yml"]
            process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
            for line in iter(process.stdout.readline, b""):
                yield f"data:{line.decode()}\n"
            process.stdout.close()
            os.unlink(tmp_inventory.name)

        return Response(stream_logs(), mimetype='text/event-stream')

    return render_template("index.html", predefined_accounts=PREDEFINED_ACCOUNTS)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8443)
