from flask import Flask, render_template_string, request, Response
import paramiko
import requests
import time

app = Flask(__name__)
app.secret_key = "change-me"

# HTML template with live log area
TEMPLATE = """
<!doctype html>
<html>
<head>
<title>Live Tenable Deploy</title>
<style>
body { font-family: monospace; background: #f4f6f8; padding: 2rem; }
#log { background: #ffffff; border:1px solid #ccc; height:400px; overflow:auto; padding:1rem;}
</style>
</head>
<body>
<h2>Deploy Nessus Agent</h2>
<form method="post" action="/deploy">
Host: <input name="host" value="host.example.com"><br>
User: <input name="username"><br>
Password: <input type="password" name="password"><br>
<button type="submit">Deploy</button>
</form>
<hr>
<h3>Live Logs:</h3>
<div id="log"></div>
<script>
var evtSource = new EventSource("/stream");
evtSource.onmessage = function(e) {
    var logDiv = document.getElementById("log");
    logDiv.innerHTML += e.data + "<br>";
    logDiv.scrollTop = logDiv.scrollHeight;
};
</script>
</body>
</html>
"""

# Simple global queue for logs (for demonstration)
logs = []

@app.route("/")
def index():
    return render_template_string(TEMPLATE)

@app.route("/deploy", methods=["POST"])
def deploy():
    host = request.form["host"]
    username = request.form["username"]
    password = request.form["password"]

    # Start deployment in background (simplified)
    from threading import Thread
    def run():
        for line in deploy_to_host(host, username, password):
            logs.append(line)
    Thread(target=run).start()
    return "Deployment started! Scroll down to see live logs."

@app.route("/stream")
def stream():
    def event_stream():
        last_len = 0
        while True:
            if len(logs) > last_len:
                for line in logs[last_len:]:
                    yield f"data: {line}\n\n"
                last_len = len(logs)
            time.sleep(0.5)
    return Response(event_stream(), mimetype="text/event-stream")

# Example deployment generator
def deploy_to_host(host, user, pw):
    yield f"Connecting to {host}..."
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(host, username=user, password=pw)
    yield "Connected!"

    cmds = ["echo 'Installing Nessus Agent...'", "uname -a", "whoami"]
    for cmd in cmds:
        yield f"$ {cmd}"
        stdin, stdout, stderr = ssh.exec_command(cmd)
        out = stdout.read().decode()
        err = stderr.read().decode()
        for line in (out + err).splitlines():
            yield line
        time.sleep(0.5)  # simulate long-running command
    ssh.close()
    yield "Deployment finished!"

if __name__ == "__main__":
    app.run(debug=True)
