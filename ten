# app.py
import os
import tempfile
from pathlib import Path
from typing import List, Optional, Tuple
import paramiko
import requests
from flask import Flask, request, render_template_string

app = Flask(__name__)
app.secret_key = os.environ.get("FLASK_SECRET_KEY", "change-me")

WORKDIR = Path(tempfile.gettempdir()) / "tenable_agent_deployer"
WORKDIR.mkdir(parents=True, exist_ok=True)

DEB_URL = "https://downloads.nessus.org/nessus3dl.php?file=nessus-agent-latest-debian.deb&licence_accept=yes&t=linux"
RPM_URL = "https://downloads.nessus.org/nessus3dl.php?file=nessus-agent-latest-rhel.rpm&licence_accept=yes&t=linux"

DEB_PATH = WORKDIR / "nessus-agent-latest.deb"
RPM_PATH = WORKDIR / "nessus-agent-latest.rpm"

TEMPLATE = """<html>... (the full HTML template from previous snippet) ...</html>"""

def parse_hosts(text: str) -> List[str]:
    return [h.strip() for h in text.splitlines() if h.strip()]

def download_package():
    if not DEB_PATH.exists():
        r = requests.get(DEB_URL, stream=True)
        with open(DEB_PATH, 'wb') as f: f.write(r.content)
    if not RPM_PATH.exists():
        r = requests.get(RPM_URL, stream=True)
        with open(RPM_PATH, 'wb') as f: f.write(r.content)

def deploy_to_host(host: str, username: str, password: str, sudo_password: Optional[str],
                   key: str, mode: str, mgr_host: Optional[str], mgr_port: Optional[str],
                   groups: str, force_relink: bool) -> Tuple[bool, str]:

    log = []
    def add(s): log.append(s)
    success = True
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        ssh.connect(host, username=username, password=password, timeout=15)
        add("Connected.")
        sudo_pw = sudo_password or password

        # Check if agent is installed
        stdin, stdout, _ = ssh.exec_command("test -x /opt/nessus_agent/sbin/nessuscli && echo INSTALLED")
        installed = "INSTALLED" in stdout.read().decode()

        if not installed:
            add("Agent not found. Detecting OS...")
            stdin, stdout, _ = ssh.exec_command("test -f /etc/debian_version && echo deb || test -f /etc/redhat-release && echo rhel")
            os_type = stdout.read().decode().strip()
            download_package()
            if os_type == 'deb':
                add("Detected Debian/Ubuntu system.")
                remote_path = "/tmp/nessus-agent.deb"
                sftp = ssh.open_sftp()
                sftp.put(str(DEB_PATH), remote_path)
                sftp.close()
                add("Package uploaded. Installing...")
                stdin, stdout, stderr = ssh.exec_command(f"sudo dpkg -i {remote_path}", get_pty=True)
                stdin.write(sudo_pw + "\n"); stdin.flush()
                add(stdout.read().decode()); add(stderr.read().decode())
                stdin, stdout, stderr = ssh.exec_command("sudo apt-get -f install -y", get_pty=True)
                stdin.write(sudo_pw + "\n"); stdin.flush()
                add(stdout.read().decode())
            elif os_type == 'rhel':
                add("Detected RHEL/CentOS/Fedora system.")
                remote_path = "/tmp/nessus-agent.rpm"
                sftp = ssh.open_sftp()
                sftp.put(str(RPM_PATH), remote_path)
                sftp.close()
                add("Package uploaded. Installing...")
                stdin, stdout, stderr = ssh.exec_command(
                    f"sudo rpm -ivh {remote_path} || sudo yum localinstall -y {remote_path} || sudo dnf install -y {remote_path}",
                    get_pty=True)
                stdin.write(sudo_pw + "\n"); stdin.flush()
                add(stdout.read().decode()); add(stderr.read().decode())

            # Enable & start service
            add("Enabling and starting Nessus agent service.")
            stdin, stdout, stderr = ssh.exec_command("sudo systemctl enable --now nessusagent", get_pty=True)
            stdin.write(sudo_pw + "\n"); stdin.flush()
            add(stdout.read().decode()); add(stderr.read().decode())

        # Check if already linked
        stdin, stdout, _ = ssh.exec_command("/opt/nessus_agent/sbin/nessuscli agent status")
        status_out = stdout.read().decode().lower()
        already_linked = "linked" in status_out

        if already_linked and not force_relink:
            add("Agent is already linked. Skipping link command.")
        else:
            if already_linked and force_relink:
                add("Forcing re-link: unlinking first.")
                stdin, stdout, stderr = ssh.exec_command("sudo -S /opt/nessus_agent/sbin/nessuscli agent unlink", get_pty=True)
                stdin.write(sudo_pw + "\n"); stdin.flush()
                add(stdout.read().decode()); add(stderr.read().decode())

            if mode == "cloud":
                cmd = f"/opt/nessus_agent/sbin/nessuscli agent link --key={key} --cloud"
            else:
                cmd = f"/opt/nessus_agent/sbin/nessuscli agent link --key={key} --host={mgr_host} --port={mgr_port}"
            if groups:
                cmd += f' --groups="{groups}"'
            add(f"Running link command: {cmd}")
            stdin, stdout, stderr = ssh.exec_command(f"sudo -S {cmd}", get_pty=True)
            stdin.write(sudo_pw + "\n"); stdin.flush()
            add(stdout.read().decode()); add(stderr.read().decode())
            if "success" not in stdout.read().decode().lower():
                success = False

    except Exception as e:
        add(f"FAILED: {e}")
        import traceback
        add(traceback.format_exc())
        success = False
    finally:
        ssh.close()

    return success, "\n".join(log)


@app.route("/", methods=["GET"])
def index():
    return render_template_string(TEMPLATE, hosts="", results=None)


@app.route("/deploy", methods=["POST"])
def deploy():
    hosts = parse_hosts(request.form.get("hosts", ""))
    username = request.form.get("username")
    password = request.form.get("password")
    sudo_password = request.form.get("sudo_password") or None
    key = request.form.get("key")
    mode = request.form.get("mode", "cloud")
    mgr_host = request.form.get("mgr_host")
    mgr_port = request.form.get("mgr_port", "8834")
    groups = request.form.get("groups", "")
    force_relink = request.form.get("force_relink") == "1"

    results = {}
    for h in hosts:
        success, log = deploy_to_host(h, username, password, sudo_password, key, mode, mgr_host, mgr_port, groups, force_relink)
        results[h] = {"success": success, "log": log}

    return render_template_string(TEMPLATE, hosts="\n".join(hosts), results=results)


if __name__ == "__main__":
    app.run(debug=True)
