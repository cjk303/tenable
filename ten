# app.py
import os
import tempfile
from pathlib import Path
from typing import List, Optional, Tuple
import paramiko
import requests
import time
from threading import Thread
from queue import Queue
from flask import Flask, render_template_string, request, Response

app = Flask(__name__)
app.secret_key = os.environ.get("FLASK_SECRET_KEY", "change-me")

WORKDIR = Path(tempfile.gettempdir()) / "tenable_agent_deployer"
WORKDIR.mkdir(parents=True, exist_ok=True)

DEB_URL = "https://downloads.nessus.org/nessus3dl.php?file=nessus-agent-latest-debian.deb&licence_accept=yes&t=linux"
RPM_URL = "https://downloads.nessus.org/nessus3dl.php?file=nessus-agent-latest-rhel.rpm&licence_accept=yes&t=linux"

DEB_PATH = WORKDIR / "nessus-agent-latest.deb"
RPM_PATH = WORKDIR / "nessus-agent-latest.rpm"

# --- HTML Template ---
TEMPLATE = r"""
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>Tenable Linux Agent Deployer</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
<style>
body { background: #f4f6f8; color: #1a1a1a; font-family: Arial, sans-serif; }
.card { background: #ffffff; border: 1px solid #d1d5db; border-radius: 1rem; }
.form-control, .form-select { background: #f9fafb; color: #1a1a1a; border: 1px solid #cbd5e1; }
.btn-primary { background: #005eb8; border-color: #005eb8; }
.btn-primary:hover { background: #004a99; border-color: #004a99; }
h1, h5, h6 { color: #002f6c; }
pre { white-space: pre-wrap; background: #e5e7eb; padding: 0.5rem; border-radius: 0.5rem; }
.badge.bg-success { background-color: #00a650; }
.badge.bg-danger { background-color: #d62828; }
#live-log { height: 400px; overflow:auto; border:1px solid #ccc; background:#f9fafb; padding:10px; white-space: pre-wrap; }
</style>
</head>
<body>
<div class="container py-4">
<h1 class="fw-bold text-center mb-4">Tenable Linux Agent Deployer</h1>
<div class="card p-4">
<h5>Deploy to Hosts</h5>
<form method="post" action="/deploy">
<div class="mb-3">
<label class="form-label">Hosts (one per line)</label>
<textarea name="hosts" class="form-control" rows="4">{{ hosts or '' }}</textarea>
</div>
<div class="row g-3">
<div class="col-md-6">
<label class="form-label">SSH Username</label>
<input name="username" class="form-control" required>
</div>
<div class="col-md-6">
<label class="form-label">SSH Password</label>
<input name="password" type="password" class="form-control" required>
</div>
</div>
<div class="mt-3">
<label class="form-label">Sudo Password (optional)</label>
<input name="sudo_password" type="password" class="form-control">
</div>
<hr>
<h6>Link Agent Options</h6>
<div class="mb-3">
<label class="form-label">Activation Key</label>
<input name="key" class="form-control" required>
</div>
<div class="mb-3">
<label class="form-label">Link Mode</label><br>
<div class="form-check form-check-inline">
<input class="form-check-input" type="radio" name="mode" value="cloud" id="modeCloud" checked>
<label class="form-check-label" for="modeCloud">Cloud (Tenable.io)</label>
</div>
<div class="form-check form-check-inline">
<input class="form-check-input" type="radio" name="mode" value="manager" id="modeMgr">
<label class="form-check-label" for="modeMgr">On-Prem Manager</label>
</div>
</div>
<div id="mgrFields">
<div class="row g-3">
<div class="col-md-6">
<label class="form-label">Manager Host</label>
<input name="mgr_host" class="form-control" placeholder="scanner.example.com">
</div>
<div class="col-md-6">
<label class="form-label">Manager Port</label>
<input name="mgr_port" class="form-control" value="8834">
</div>
</div>
</div>
<div class="mt-3">
<label class="form-label">Groups/Policy Tags (optional)</label>
<input name="groups" class="form-control" placeholder="linux-servers,production">
</div>
<div class="form-check mt-3">
<input class="form-check-input" type="checkbox" value="1" id="forceRelink" name="force_relink">
<label class="form-check-label" for="forceRelink">Force re-link even if already linked</label>
</div>
<div class="mt-3">
<button class="btn btn-primary" type="submit">Deploy & Link</button>
</div>
</form>
</div>
<hr>
<h5>Live Deployment Log:</h5>
<div id="live-log"></div>
<script>
const evtSource = new EventSource("/stream");
const logDiv = document.getElementById("live-log");
evtSource.onmessage = function(e) {
    logDiv.innerHTML += e.data + "\n";
    logDiv.scrollTop = logDiv.scrollHeight;
};

const modeCloud = document.getElementById('modeCloud');
const modeMgr = document.getElementById('modeMgr');
const mgrFields = document.getElementById('mgrFields');
function toggleFields() { mgrFields.style.display = modeMgr.checked ? 'block' : 'none'; }
if(modeCloud && modeMgr){ modeCloud.addEventListener('change', toggleFields); modeMgr.addEventListener('change', toggleFields); toggleFields(); }
</script>
</div>
</body>
</html>
"""

# Global queue for SSE logs
log_queue = Queue()

# --- Helper functions ---
def parse_hosts(text: str) -> List[str]:
    return [h.strip() for h in text.splitlines() if h.strip()]

def download_package():
    headers = {"User-Agent": "Mozilla/5.0"}
    for url, path in [(DEB_URL, DEB_PATH), (RPM_URL, RPM_PATH)]:
        if not path.exists() or path.stat().st_size == 0:
            r = requests.get(url, headers=headers, stream=True, allow_redirects=True)
            r.raise_for_status()
            with open(path, 'wb') as f:
                for chunk in r.iter_content(1024):
                    f.write(chunk)
            if path.stat().st_size == 0:
                raise RuntimeError(f"Downloaded file {path} is empty!")

def mask_password(text: str, password: str) -> str:
    if not password:
        return text
    return text.replace(password, "***")

def log(line: str):
    print(line)
    log_queue.put(line)

def deploy_to_host(host: str, username: str, password: str, sudo_password: Optional[str],
                   key: str, mode: str, mgr_host: Optional[str], mgr_port: Optional[str],
                   groups: str, force_relink: bool):

    try:
        log(f"[{host}] Connecting...")
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(host, username=username, password=password, timeout=15)
        log(f"[{host}] Connected!")
        sudo_pw = sudo_password or password

        # Detect OS
        stdin, stdout, _ = ssh.exec_command(
            "test -f /etc/debian_version && echo deb || test -f /etc/redhat-release && echo rhel")
        os_type = stdout.read().decode().strip()
        log(f"[{host}] Detected OS: {os_type}")

        download_package()
        remote_path = "/tmp/nessus-agent.deb" if os_type=='deb' else "/tmp/nessus-agent.rpm"
        local_path = DEB_PATH if os_type=='deb' else RPM_PATH

        sftp = ssh.open_sftp()
        log(f"[{host}] Uploading {local_path.name}...")
        sftp.put(str(local_path), remote_path)
        sftp.close()

        # Install package
        if os_type == 'deb':
            cmd = f"sudo dpkg -i {remote_path} || sudo apt-get -f install -y"
        else:
            cmd = f"sudo rpm -ivh {remote_path} || sudo yum localinstall -y {remote_path} || sudo dnf install -y {remote_path}"
        log(f"[{host}] Installing package: {cmd}")
        stdin, stdout, stderr = ssh.exec_command(cmd, get_pty=True)
        stdin.write(sudo_pw + "\n"); stdin.flush()
        out = mask_password(stdout.read().decode(), sudo_pw)
        err = mask_password(stderr.read().decode(), sudo_pw)
        for line in (out + err).splitlines():
            log(f"[{host}] {line}")

        # Enable service
        log(f"[{host}] Enabling and starting Nessus agent service...")
        stdin, stdout, stderr = ssh.exec_command("sudo systemctl enable --now nessusagent", get_pty=True)
        stdin.write(sudo_pw + "\n"); stdin.flush()
        out = mask_password(stdout.read().decode(), sudo_pw)
        err = mask_password(stderr.read().decode(), sudo_pw)
        for line in (out + err).splitlines():
            log(f"[{host}] {line}")

        # Link agent
        stdin, stdout, _ = ssh.exec_command("/opt/nessus_agent/sbin/nessuscli agent status")
        status_out = stdout.read().decode().lower()
        already_linked = "linked" in status_out
        if already_linked and not force_relink:
            log(f"[{host}] Agent already linked. Skipping linking.")
        else:
            if already_linked and force_relink:
                log(f"[{host}] Forcing re-link...")
                stdin, stdout, stderr = ssh.exec_command("sudo /opt/nessus_agent/sbin/nessuscli agent unlink", get_pty=True)
                stdin.write(sudo_pw + "\n"); stdin.flush()
                out = mask_password(stdout.read().decode(), sudo_pw)
                for line in out.splitlines():
                    log(f"[{host}] {line}")
            if mode == "cloud":
                cmd = f"/opt/nessus_agent/sbin/nessuscli agent link --key={key} --cloud"
            else:
                cmd = f"/opt/nessus_agent/sbin/nessuscli agent link --key={key} --host={mgr_host} --port={mgr_port}"
            if groups:
                cmd += f' --groups="{groups}"'
            log(f"[{host}] Linking agent: {cmd}")
            stdin, stdout, stderr = ssh.exec_command(f"sudo {cmd}", get_pty=True)
            stdin.write(sudo_pw + "\n"); stdin.flush()
            out = mask_password(stdout.read().decode(), sudo_pw)
            for line in out.splitlines():
                log(f"[{host}] {line}")

        ssh.close()
        log(f"[{host}] Deployment finished successfully!")
    except Exception as e:
        log(f"[{host}] Deployment FAILED: {e}")

# --- Flask routes ---
@app.route("/", methods=["GET"])
def index():
    return render_template_string(TEMPLATE, hosts="")

@app.route("/deploy", methods=["POST"])
def deploy():
    hosts = parse_hosts(request.form.get("hosts", ""))
    username = request.form.get("username")
    password = request.form.get("password")
    sudo_password = request.form.get("sudo_password") or None
    key = request.form.get("key")
    mode = request.form.get("mode", "cloud")
    mgr_host = request.form.get("mgr_host")
    mgr_port = request.form.get("mgr_port", "8834")
    groups = request.form.get("groups", "")
    force_relink = request.form.get("force_relink") == "1"

    # Start background deployment
    def run_deploy():
        for host in hosts:
            deploy_to_host(host, username, password, sudo_password, key, mode, mgr_host, mgr_port, groups, force_relink)
    Thread(target=run_deploy, daemon=True).start()

    return render_template_string(TEMPLATE, hosts="\n".join(hosts))

@app.route("/stream")
def stream():
    def event_stream():
        while True:
            line = log_queue.get()
            yield f"data: {line}\n\n"
    return Response(event_stream(), mimetype="text/event-stream")

if __name__ == "__main__":
    app.run(debug=True)
